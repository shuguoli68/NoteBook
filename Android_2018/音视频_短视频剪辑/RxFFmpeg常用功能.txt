https://github.com/microshow/RxFFmpeg

20190220，已测试，9条都正确


【1】这个命令是把视频解码成一张张图片: ffmpeg -y -i /storage/emulated/0/1/input.mp4 -preset superfast /storage/emulated/0/1/output_frames_%05d.jpg


【2】两个或则三个视频拼接
这种合并方式的适用场景是：当容器格式不支持文件层次的合并，而又不想（不需要）进行再编码的操作的时候。这种方式对源视频同样有【同格式同性质】的要求

ffmpeg -y -f concat -safe 0 -i /storage/emulated/0/1/Cam01.txt -c copy /storage/emulated/0/1/Cam01.mp4


Cam01.txt文件里面的内容类似如下(要改成全路径形式)

file '/storage/emulated/0/1/input1.mp4'

file '/storage/emulated/0/1/input2.mp4'

file '/storage/emulated/0/1/input3.mp4'


【3】提取音频
ffmpeg -y -i /storage/emulated/0/1/input.mp4 -vn /storage/emulated/0/1/result.mp3 现在提取音频主流都是mp3格式的


【4】avi 和mp4互转
ffmpeg -y -i /storage/emulated/0/1/test.avi -max_muxing_queue_size 1024 /storage/emulated/0/1/result.mp4


【5】音频裁剪：-ss是开始时间; -t是持续时长

ffmpeg -y -i /storage/emulated/0/1/input.mp3 -ss 00:00:00 -t 00:00:05 /storage/emulated/0/1/result.mp3


【6】音视频（格式mp4/mp3）合并
1、如果视频比音频时间长 音频循环： 需要根据视频时长，事先拼接音频，保持音频时间和视频一致，可能还涉及到裁剪音频，根据实际时长处理；

2、如果视频时间比音频短 将音频裁剪：需要根据视频时长先裁剪音频，在合成

大致就这样，命令的话你得分步骤去处理了


【7】倒转视频
ffmpeg -y -i /storage/emulated/0/1/input.mp4 -vf reverse -af areverse -preset superfast /storage/emulated/0/1/result.mp4


【8】视频压缩
ffmpeg -y -i /storage/emulated/0/1/input.mp4 -vf boxblur=5:1 -preset superfast /storage/emulated/0/1/result.mp4




【其他地方查找到的】：
【9】音频合成：inputs=2要合并的音频数，-ac：//声道数，-ar：//采样率，-ab：//比特率
ffmpeg -y -i /storage/emulated/0/1/input1.mp3 -i /storage/emulated/0/1/input2.mp3 -filter_complex amix=inputs=2:duration=first:dropout_transition=1 -f mp3 -ac 1 -ar 24k -ab 32k -y /storage/emulated/0/1/result.mp3














String text = "ffmpeg -y -i /storage/emulated/0/1/input.mp4 -vf boxblur=25:5 -preset superfast /storage/emulated/0/1/result.mp4";

String[] commands = text.split(" ");

RxFFmpegInvoke.getInstance().runCommandRxJava(commands).subscribe(new RxFFmpegSubscriber() {
            @Override
            public void onFinish() {
                if (mProgressDialog != null)
                    mProgressDialog.cancel();
                showDialog("处理成功");
            }

            @Override
            public void onProgress(int progress) {
                if (mProgressDialog != null)
                    mProgressDialog.setProgress(progress);
            }

            @Override
            public void onCancel() {
                if (mProgressDialog != null)
                    mProgressDialog.cancel();
                showDialog("已取消");
            }

            @Override
            public void onError(String message) {
                if (mProgressDialog != null)
                    mProgressDialog.cancel();
                showDialog("出错了 onError：" + message);
            }
        });



截取特定时间段的视频：ffmpeg -i input.mp4 -ss 5 -t 10 output.mp4 为从5秒开始截最多截取10秒 也就是截取5秒到15秒的数据

上述命令也可以为

ffmpeg -ss 5 -i input.mp4 -t 10 -c:v copy -c:a copy output.mp4
上面的命令把-ss 5放到-i前面，与原来的区别是，这样会先跳转到第5秒在开始解码输入视频，而原来的会从开始解码，只是丢弃掉前5秒的结果。 而-c:v copy -c:a copy标示视频与音频的编码不发生改变，而是直接复制，这样会大大提升速度，因为这样就不需要完全解码视频（视频剪切也不需要完全解码）。

ffmpeg可以把一组图片转换成一个视频（可以把gif动画也当成一种视频格式），反之亦可。命令如下

ffmpeg -i %04d.jpg output.mp4
ffmpeg -i input.mp4 %04d.jpg
第一行命令是把0001.jpg、0002.jpg、0003.jpg等编码成output.mp4，第二行则是相反把input.mp4变成0001.jpg……。 %04d.jpg表示从1开始用0补全的4位整数为文件名的jpg文件序列。 如果想要序列文件名为hello_00001.png等等的话，就是hello_%05d.png

如果编码视频的时候还想加入声音，则如下这般添加一个输入文件：

ffmpeg -i input.mp3 -i %04d.jpg output.mp4
改变视频FPS
FFmpeg可以用于降低或提高视频的帧率，因为信息丢失不可逆法则，提高帧率只会简单地让某些帧的画面多重复一次或多次，所以提高帧率不会提高画质。

ffmpeg -i input.mp4 -r 30 output.mp4
上面的命令，不论原始视频帧率是多少，输出视频都会是30帧每秒。这种情况之下视频的时间轴不会变化，不会有慢动作或快动作的效果。

ffmpeg -r 30 -i input.mp4 output.mp4
上面这种条换顺序之后的写法比较有意思，-r 30放在输入文件之前表示影响的时输入文件，而非输出文件。 这样的命令表达的是，把输入文件当做30帧每秒，而忽略它的原始帧率。这样如果原来的视频FPS是25，被视作30之后，输出的视频会有快进的效果。 这个命令没有指定输出视频的FPS，默认会与输入文件保持一样，可以与本节第一个命令和在一起，写两个-r参数，第一个指定输入FPS，第二个指定 输出FPS即可既控制播放速度，又控制输出帧率。

H264视频首尾拼接
如果确定输入文件都是H264编码，且尺寸、帧率等都相同，先把源视频转换成用于直播的ts格式。 然后直接对多个ts文件进行文件级的拼接，然后在转换回到目标格式。这个过程中，不会发生格式转换，所以非常迅速。

ffmpeg -i q.mp4 -c copy -bsf h264_mp4toannexb q.ts
ffmpeg -i r.mp4 -c copy -bsf h264_mp4toannexb r.ts
ffmpeg -i "concat:q.ts|r.ts" -c copy -bsf aac_adtstoasc qr.mp4
音频篇
以下命令主要用于音频操作。有许多上面已经给出的视频操作，比如格式转换，剪切等也可适用于音频。大部分视频也都包含音频，所以下面的命令 往往可以与视频命令混合适用。

提取音乐中的封面图片
有些音乐文件包含专辑封面图片在里面，可以用如下命令简单取出。命令从字面意义来讲，就是把MP3格式转换成JPEG格式了。

ffmpeg -i input.mp3 cover.jpg
音乐有损压缩
在某些场合下，比如在给网站做背景音乐，或音乐网站提供预览版音乐时，会选择以牺牲音频质量为代价降低文件大小，让网络播放更顺畅。 一个典型的压缩命令如下：

ffmpeg -i input.mp3 -ac 1 -ar 32k -bit_rate:a 128k output.mp3
--------------------- 
作者：黄林晴 
来源：CSDN 
原文：https://blog.csdn.net/huangliniqng/article/details/81842273 
版权声明：本文为博主原创文章，转载请附上博文链接！