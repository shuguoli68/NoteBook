/** 
 * 跟网络相关的工具类 
 *  
 */  
public class NetUtils {  
      
    private NetUtils() {  
        throw new UnsupportedOperationException("cannot be instantiated");  
    }  
  
    /** 
     * 判断网络是否连接 
     *  
     * @param context 
     * @return 
     */  
    public static boolean isConnected(Context context) {  
  
        ConnectivityManager connectivity = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);  
  
        if (null != connectivity) {  
  
            NetworkInfo info = connectivity.getActiveNetworkInfo();  
            if (null != info && info.isConnected()) {  
                if (info.getState() == NetworkInfo.State.CONNECTED) {  
                    return true;  
                }  
            }  
        }  
        return false;  
    }  
  
    /** 
     * 判断是否是wifi连接 
     */  
    public static boolean isWifi(Context context) {  
        ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);  
  
        if (cm == null)  
            return false;  
        return cm.getActiveNetworkInfo().getType() == ConnectivityManager.TYPE_WIFI;  
  
    }  
  
    /** 
     * 打开网络设置界面 
     */  
    public static void openSetting(Activity activity) {  
        Intent intent = new Intent("/");  
        ComponentName cm = new ComponentName("com.android.settings", "com.android.settings.WirelessSettings");  
        intent.setComponent(cm);  
        intent.setAction("android.intent.action.VIEW");  
        activity.startActivityForResult(intent, 0);  
    }  
    /** 
     * 获取ip 
     *  
     * @return 
     */  
    public static String getLocalIPAddress() {  
        try {  
            for (Enumeration<NetworkInterface> en = NetworkInterface  
                    .getNetworkInterfaces(); en.hasMoreElements();) {  
  
                NetworkInterface intf = en.nextElement();  
  
                for (Enumeration<InetAddress> enumIpAddr = intf  
                        .getInetAddresses(); enumIpAddr.hasMoreElements();) {  
  
                    InetAddress inetAddress = enumIpAddr.nextElement();  
  
                    if (!inetAddress.isLoopbackAddress()  
                            && inetAddress instanceof Inet4Address) {  
                        // return inetAddress.getAddress().toString();  
                        return inetAddress.getHostAddress().toString();  
                    }  
                }  
            }  
        } catch (SocketException ex) {  
            Log.e("BaseScanTvDeviceClient", "获取本机IP false =" + ex.toString());  
        }  
  
        return null;  
    }  
  
    public static String getLocalIPAddress(Context context) {  
        WifiManager wifiManager = (WifiManager) context  
                .getSystemService(Context.WIFI_SERVICE);  
        WifiInfo wifiInfo = wifiManager.getConnectionInfo();  
        String ipAddress = FormatIP(wifiInfo.getIpAddress());  
        return ipAddress;  
    }  
  
    public static String FormatIP(int ip) {  
        return Formatter.formatIpAddress(ip);  
    }  
  
    // /获取本机IP地址  
  
    public static String getLocalIpAddress(Context ctx) {  
        WifiManager wifiManager = (WifiManager) ctx  
                .getSystemService(android.content.Context.WIFI_SERVICE);  
        WifiInfo wifiInfo = wifiManager.getConnectionInfo();  
        int ipAddress = wifiInfo.getIpAddress();  
        try {  
            return InetAddress.getByName(  
                    String.format("%d.%d.%d.%d", (ipAddress & 0xff),  
                            (ipAddress >> 8 & 0xff), (ipAddress >> 16 & 0xff),  
                            (ipAddress >> 24 & 0xff))).toString();  
        } catch (UnknownHostException e) {  
            return null;  
        }  
  
    }  
  
    // 获取本机的物理地址  
    public static String getLocalMacAddress(Context ctx) {  
        WifiManager wifi = (WifiManager) ctx  
                .getSystemService(Context.WIFI_SERVICE);  
        WifiInfo info = wifi.getConnectionInfo();  
        return info.getMacAddress();  
    }  
     /** 
     * 校验IP地址和默认网关和子网掩码之间关系是否正确 
     * @param ip 
     * @param subMask 子网掩码 
     * @param gate 默认网关 
     * @return 
     */  
    public static boolean checkIP(String ip,String subMask,String gate){   
        int IPAddr = (int) ipToLong(ip);  
        int SubMask = (int) ipToLong(subMask);  
        int Gate = (int) ipToLong(gate);  
        int IPAndSubMask = IPAddr & SubMask;  
        int GateAndSubMask = Gate & SubMask;  
        if( 0 == SubMask)// 子网掩码不为0.0.0.0  
        {  
            return false;  
        }  
        if( IPAddr == Gate){// IP地址和网关地址不同  
            return false;  
        }  
              
        if(IPAndSubMask != GateAndSubMask){// IP所在网段和网关所在网段相同  
            return false;  
        }  
  
        if(IPAndSubMask == IPAddr){ // IP地址和IP地址的网段号不同  
            return false;  
        }  
  
        if((IPAndSubMask|(~SubMask)) == IPAddr ){// IP地址和IP地址的网段号不同  
            return false;  
        }  
        int SubMaskTest = (~SubMask) + 1;  
        if (0 != (SubMaskTest & (SubMaskTest - 1)))  
        {// 子网掩码合法性判断，应该是子网掩码不为0的判断。  
            return false;  
        }  
        int Ip1Code = (IPAddr >> 24) & 0xFF;  
        if(0==Ip1Code || (Ip1Code>223 && Ip1Code<255) || 255==Ip1Code )  
        {// IP地址最高位判断  
            return false;  
        }  
        return true;  
    }  
    /** 
     *  将127.0.0.1 形式的IP地址转换成10进制整数，这里没有进行任何错误处理   
     * @param strIP 
     * @return 
     */  
    public static long ipToLong(String strIP) {    
        long[] ip = new long[4];    
        // 先找到IP地址字符串中.的位置    
        int position1 = strIP.indexOf(".");    
  
        int position2 = strIP.indexOf(".", position1 + 1);    
  
        int position3 = strIP.indexOf(".", position2 + 1);    
  
        // 将每个.之间的字符串转换成整型    
  
        ip[0] = Long.parseLong(strIP.substring(0, position1));    
  
        ip[1] = Long.parseLong(strIP.substring(position1 + 1, position2));    
  
        ip[2] = Long.parseLong(strIP.substring(position2 + 1, position3));    
  
        ip[3] = Long.parseLong(strIP.substring(position3 + 1));    
  
        return (ip[0] << 24) + (ip[1] << 16) + (ip[2] << 8) + ip[3];    
  
    }    
}  