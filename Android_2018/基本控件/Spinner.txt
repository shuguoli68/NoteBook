【简单使用】

// 初始化控件  
Spinner spinner = (Spinner) findViewById(R.id.spinner1);  
// 建立数据源  
final List<String> mItems = new ArrayList<>(); 
// 建立Adapter并且绑定数据源  
ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item, mItems);  
adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);  
//绑定 Adapter到控件  
spinner .setAdapter(adapter);  
spinner.setOnItemSelectedListener(new OnItemSelectedListener() {  
    @Override  
    public void onItemSelected(AdapterView<?> parent, View view,   
            int pos, long id) {  
  
        Toast.makeText(MainActivity.this, "你点击的是:"+mItems .get(pos), 2000).show();  
    }  
    @Override  
    public void onNothingSelected(AdapterView<?> parent) {  
        // Another interface callback  
    }  
});  




【Spinner弹出框遮挡住显示框的解决办法】直接设置Spinner的Theme

尝试设置了一些属性也没什么效果，之前在其它项目中使用Spinner的时候，并未出现这个现象。对比之后发现，属性设置一致，不同的地方在于Spinner所在Activity的主题不一样，设置为android:theme=”@android:style/Theme.Holo.Light.NoActionBar”就不会出现这个问题了。


<Spinner
                    android:id="@+id/setting_language"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    style="@style/my_spinner"
                    android:background="@drawable/setting_language_input_phone"
                    />

<style name="my_spinner">
        <item name="android:theme">@android:style/Theme.Holo.Light.NoActionBar</item>
    </style>



【spinner初始化】

从没想过使用基本控件也会采坑，经过查找资料后写一个demo测试一番。
Spinner mySpinner;

private void initSpinner() {
        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, getData());
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        mySpinner = findViewById(R.id.my_spinner);
        mySpinner.setAdapter(adapter);
        mySpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                Toast.makeText(MainActivity.this,dataList.get(i),Toast.LENGTH_SHORT).show();
                Log.i("onItemSelected: ", dataList.get(i));
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });
    }
    List<String> dataList = new ArrayList<String>();
    private List<String> getData() {
        // 数据源
        dataList.clear();
        dataList.add("华为");
        dataList.add("小米");
        dataList.add("魅族");
        dataList.add("三星");
        return dataList;
    }


【1】简单使用，运行程序发现spinner会默认选择第一项并且执行一次onItemSelected事件。


【2】初始化时设置适配器后mySpinner.setAdapter(adapter);加上：
        mySpinner.setSelection(2);或mySpinner.setSelection(2,false);
运行程序发现spinner会默认选择第3项并且执行一次onItemSelected事件。

【3】修改为mySpinner.setSelection(2,true);
运行程序发现spinner会默认选择第3项，不执行onItemSelected事件。

【4】如果不使用mySpinner.setSelection，则加上一个是否是第一次进来的判断：
boolean first = true;
mySpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                if (first) {
                    first= false;
                } else {
                    Toast.makeText(MainActivity.this,dataList.get(i),Toast.LENGTH_SHORT).show();
                    Log.i("onItemSelected: ", dataList.get(i));
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {

            }
        });
运行程序发现spinner会默认选择第1项，不执行onItemSelected事件。

【5】解决同一个 item 选中第二次的时候不触发 OnItemSelectedListener的问题：
1.通过反射实现：
mySpinner.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                try {
                    Class<?> clazz = AdapterView.class;
                    Field field = clazz.getDeclaredField("mOldSelectedPosition");
                    field.setAccessible(true);
                    field.setInt(mySpinner, AdapterView.INVALID_POSITION);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return false;
            }
        });
运行程序发现同一个item选中第二次的时候会触发 OnItemSelectedListener，问题解决。
2.自定义Spinner：
public class MySpinner extends AppCompatSpinner{
    private static final String TAG = "MySpinner";

    private int lastPosition = 0;

    public MySpinner(Context context, int mode) {
        super(context, mode);
    }

    public MySpinner(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public MySpinner(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }

    public MySpinner(Context context, AttributeSet attrs, int defStyleAttr, int mode) {
        super(context, attrs, defStyleAttr, mode);
    }
    @Override
    public void setSelection(int position, boolean animate) {
        super.setSelection(position, animate);
        if (position == lastPosition){
            getOnItemSelectedListener().onItemSelected(this,null,position,0);
        }
        lastPosition = position;
    }

    @Override
    public void setSelection(int position) {
        super.setSelection(position);
        if (position == lastPosition){
            getOnItemSelectedListener().onItemSelected(this,null,position,0);
        }
        lastPosition = position;
    }
}
自定义Spinner主要是判断同一个item第二次选中时，手动调用监听。运行程序发现同一个item选中第二次的时候会触发 OnItemSelectedListener，问题解决。